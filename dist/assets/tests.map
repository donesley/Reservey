{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","reservey/tests/app.lint-test.js","reservey/tests/helpers/create-offline-ref.js","reservey/tests/helpers/destroy-firebase-apps.js","reservey/tests/helpers/ember-power-select.js","reservey/tests/helpers/replace-app-ref.js","reservey/tests/helpers/replace-firebase-app-service.js","reservey/tests/helpers/stub-firebase.js","reservey/tests/helpers/unstub-firebase.js","reservey/tests/integration/components/rs-dialog/component-test.js","reservey/tests/integration/components/rs-header/component-test.js","reservey/tests/integration/components/rs-service-form/component-test.js","reservey/tests/integration/components/rs-service-input/component-test.js","reservey/tests/integration/components/rs-service-item/component-test.js","reservey/tests/integration/components/rs-sidebar/component-test.js","reservey/tests/integration/components/service-items/component-test.js","reservey/tests/test-helper.js","reservey/tests/tests.lint-test.js","reservey/tests/unit/addclassroom/model-test.js","reservey/tests/unit/admin/controller-test.js","reservey/tests/unit/admin/edit/controller-test.js","reservey/tests/unit/admin/edit/route-test.js","reservey/tests/unit/admin/index/controller-test.js","reservey/tests/unit/admin/index/route-test.js","reservey/tests/unit/admin/new/route-test.js","reservey/tests/unit/admin/route-test.js","reservey/tests/unit/admin/service/route-test.js","reservey/tests/unit/application/adapter-test.js","reservey/tests/unit/application/controller-test.js","reservey/tests/unit/application/route-test.js","reservey/tests/unit/classroom/model-test.js","reservey/tests/unit/classrooms/classroom/reservations/controller-test.js","reservey/tests/unit/classrooms/classroom/route-test.js","reservey/tests/unit/classrooms/controller-test.js","reservey/tests/unit/classrooms/model-test.js","reservey/tests/unit/classrooms/reservations/index/route-test.js","reservey/tests/unit/classrooms/reservations/new/route-test.js","reservey/tests/unit/classrooms/reservations/route-test.js","reservey/tests/unit/classrooms/route-test.js","reservey/tests/unit/dialog/service-test.js","reservey/tests/unit/mallfunctions/model-test.js","reservey/tests/unit/reservations/controller-test.js","reservey/tests/unit/reservations/model-test.js","reservey/tests/unit/rs-agenda/route-test.js","reservey/tests/unit/rs-overview/route-test.js","reservey/tests/unit/rs-overview/rs-reservation/route-test.js","reservey/tests/unit/rs-reservation-logs/route-test.js","reservey/tests/unit/rs-reservations/route-test.js","reservey/tests/unit/rs-service-item/model-test.js","reservey/tests/unit/rs-service/edit/route-test.js","reservey/tests/unit/rs-service/index/route-test.js","reservey/tests/unit/rs-service/new/route-test.js","reservey/tests/unit/rs-service/route-test.js","reservey/tests/unit/service-items/model-test.js","reservey/tests/unit/service/model-test.js","reservey/tests/unit/services/route-test.js","reservey/tests/unit/session/service-test.js","reservey/tests/unit/sidebar/service-test.js","reservey/tests/unit/users/model-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('reservey/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('admin/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('admin/edit/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/edit/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('admin/edit/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/edit/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('admin/index/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/index/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('admin/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('admin/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('application/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'application/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/classroom/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/classroom/model.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/classroom/reservations/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/classroom/reservations/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/classroom/reservations/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/classroom/reservations/model.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/classroom/reservations/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/classroom/reservations/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/classroom/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/classroom/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/model.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/reservations/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/reservations/index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/reservations/new/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/reservations/new/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/reservations/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/reservations/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('classrooms/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'classrooms/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rs-dialog/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rs-dialog/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rs-header/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rs-header/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rs-service-form/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/rs-service-form/component.js should pass ESLint\\n\\n12:7 - Use closure actions, unless you need bubbling (ember/closure-actions)');\n  });\n\n  QUnit.test('components/rs-service-input/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rs-service-input/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rs-service-item/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rs-service-item/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/rs-sidebar/component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rs-sidebar/component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('dialog/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dialog/service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('formats.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'formats.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mallfunctions/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mallfunctions/model.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('reservations/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'reservations/model.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-agenda/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-agenda/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-classrooms/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'rs-classrooms/route.js should pass ESLint\\n\\n4:5 - \\'Classroom\\' is assigned a value but never used. (no-unused-vars)\\n15:5 - \\'Reservation\\' is assigned a value but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('rs-classrooms/rs-reservation/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-classrooms/rs-reservation/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-classrooms/rs-reservation/rs-reservations/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-classrooms/rs-reservation/rs-reservations/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-service/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-service/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-service/edit/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-service/edit/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-service/index/controller.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-service/index/controller.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-service/index/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-service/index/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('rs-service/route.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'rs-service/route.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('session/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'session/service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('sidebar/service.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'sidebar/service.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('users/model.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/model.js should pass ESLint\\n\\n');\n  });\n});","define('reservey/tests/helpers/create-offline-ref', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = createOfflineRef;\n\n\n  /**\n   * Creates an offline firebase reference with optional initial data and url.\n   *\n   * Be sure to `stubfirebase()` and `unstubfirebase()` in your tests!\n   *\n   * @param  {!Object} [initialData]\n   * @param  {string} [url]\n   * @param  {string} [apiKey]\n   * @return {!firebase.database.Reference}\n   */\n  function createOfflineRef(initialData, url = 'https://emberfire-tests-2c814.firebaseio.com', apiKey = 'AIzaSyC9-ndBb1WR05rRF1msVQDV6EBqB752m6o') {\n\n    if (!_firebase.default._unStub) {\n      throw new Error('Please use stubFirebase() before calling this method');\n    }\n\n    const config = {\n      apiKey: apiKey,\n      authDomain: 'emberfire-tests-2c814.firebaseapp.com',\n      databaseURL: url,\n      storageBucket: ''\n    };\n\n    let app;\n\n    try {\n      app = _firebase.default.app();\n    } catch (e) {\n      app = _firebase.default.initializeApp(config);\n    }\n\n    const ref = app.database().ref();\n\n    app.database().goOffline(); // must be called after the ref is created\n\n    if (initialData) {\n      ref.set(initialData);\n    }\n\n    return ref;\n  }\n});","define('reservey/tests/helpers/destroy-firebase-apps', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyFirebaseApps;\n\n\n  const { run } = Ember;\n\n  /**\n   * Destroy all Firebase apps.\n   */\n  function destroyFirebaseApps() {\n    const deletions = _firebase.default.apps.map(app => app.delete());\n    Ember.RSVP.all(deletions).then(() => run(() => {\n      // NOOP to delay run loop until the apps are destroyed\n    }));\n  }\n});","define('reservey/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('reservey/tests/helpers/replace-app-ref', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = replaceAppRef;\n  /**\n   * Updates the supplied app adapter's Firebase reference.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!firebase.database.Reference} ref\n   * @param  {string} [model]  The model, if overriding a model specific adapter\n   */\n  function replaceAppRef(app, ref, model = 'application') {\n    app.register('service:firebaseMock', ref, { instantiate: false, singleton: true });\n    app.inject('adapter:firebase', 'firebase', 'service:firebaseMock');\n    app.inject('adapter:' + model, 'firebase', 'service:firebaseMock');\n  }\n});","define('reservey/tests/helpers/replace-firebase-app-service', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = replaceFirebaseAppService;\n  /**\n   * Replaces the `firebaseApp` service with your own using injection overrides.\n   *\n   * This is usually not needed in test modules, where you can re-register over\n   * existing names in the registry, but in acceptance tests, some registry/inject\n   * magic is needed.\n   *\n   * @param  {!Ember.Application} app\n   * @param  {!Object} newService\n   */\n  function replaceFirebaseAppService(app, newService) {\n    app.register('service:firebaseAppMock', newService, { instantiate: false, singleton: true });\n    app.inject('torii-provider:firebase', 'firebaseApp', 'service:firebaseAppMock');\n    app.inject('torii-adapter:firebase', 'firebaseApp', 'service:firebaseAppMock');\n  }\n});","define('reservey/tests/helpers/stub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = stubFirebase;\n\n\n  /**\n   * When a reference is in offline mode it will not call any callbacks\n   * until it goes online and resyncs. The ref will have already\n   * updated its internal cache with the changed values so we shortcut\n   * the process and call the supplied callbacks immediately (asynchronously).\n   */\n  function stubFirebase() {\n    // check for existing stubbing\n    if (!_firebase.default._unStub) {\n      var originalSet = _firebase.default.database.Reference.prototype.set;\n      var originalUpdate = _firebase.default.database.Reference.prototype.update;\n      var originalRemove = _firebase.default.database.Reference.prototype.remove;\n\n      _firebase.default._unStub = function () {\n        _firebase.default.database.Reference.prototype.set = originalSet;\n        _firebase.default.database.Reference.prototype.update = originalUpdate;\n        _firebase.default.database.Reference.prototype.remove = originalRemove;\n      };\n\n      _firebase.default.database.Reference.prototype.set = function (data, cb) {\n        originalSet.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase.default.database.Reference.prototype.update = function (data, cb) {\n        originalUpdate.call(this, data);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n\n      _firebase.default.database.Reference.prototype.remove = function (cb) {\n        originalRemove.call(this);\n        if (typeof cb === 'function') {\n          setTimeout(cb, 0);\n        }\n      };\n    }\n  }\n});","define('reservey/tests/helpers/unstub-firebase', ['exports', 'firebase'], function (exports, _firebase) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = unstubFirebase;\n  function unstubFirebase() {\n    if (typeof _firebase.default._unStub === 'function') {\n      _firebase.default._unStub();\n      delete _firebase.default._unStub;\n    }\n  }\n});","define('reservey/tests/integration/components/rs-dialog/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | rs-dialog', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"LLKDESGV\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"rs-dialog\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Cdb06YQv\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rs-dialog\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/integration/components/rs-header/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | rs-header', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2+hA8smG\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"rs-header\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"E6UV61gT\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rs-header\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/integration/components/rs-service-form/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | rs-service-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4opYRhHI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"rs-service-form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"6AWKmWy2\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rs-service-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/integration/components/rs-service-input/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | rs-service-input', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fGtyomab\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"rs-service-input\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fnM2av2s\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rs-service-input\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/integration/components/rs-service-item/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | rs-service-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VSRihoKK\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"rs-service-item\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kB5AOY4P\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rs-service-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/integration/components/rs-sidebar/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | rs-sidebar', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"oAO9U8It\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"rs-sidebar\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2BzpuAbn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"rs-sidebar\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/integration/components/service-items/component-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | service-items', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"/Z6fk7A0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"service-items\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Px/yCuxd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"service-items\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('reservey/tests/test-helper', ['reservey/app', 'reservey/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('reservey/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/rs-dialog/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rs-dialog/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rs-header/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rs-header/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rs-service-form/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rs-service-form/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rs-service-input/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rs-service-input/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rs-service-item/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rs-service-item/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/rs-sidebar/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rs-sidebar/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/service-items/component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/service-items/component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/addclassroom/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/addclassroom/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/edit/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/edit/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/edit/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/edit/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/index/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/index/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/index/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/new/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/new/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/admin/service/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/admin/service/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/application/adapter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/adapter-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/application/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/application/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/application/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classroom/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classroom/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/classroom/reservations/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/classroom/reservations/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/classroom/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/classroom/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/reservations/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/reservations/index/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/reservations/new/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/reservations/new/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/reservations/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/reservations/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/classrooms/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/classrooms/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/dialog/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/dialog/service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mallfunctions/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mallfunctions/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/reservations/controller-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/reservations/controller-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/reservations/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/reservations/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-agenda/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-agenda/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-overview/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-overview/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-overview/rs-reservation/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-overview/rs-reservation/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-reservation-logs/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-reservation-logs/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-reservations/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-reservations/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-service-item/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-service-item/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-service/edit/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-service/edit/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-service/index/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-service/index/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-service/new/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-service/new/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/rs-service/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/rs-service/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/service-items/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/service-items/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/service/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/service/model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/route-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/route-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/session/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/session/service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/sidebar/service-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/sidebar/service-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/users/model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/users/model-test.js should pass ESLint\\n\\n');\n  });\n});","define('reservey/tests/unit/addclassroom/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | addclassroom', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('addclassroom', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/admin/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | admin', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:admin');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/admin/edit/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | admin/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:admin/edit');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/admin/edit/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | admin/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:admin/edit');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/admin/index/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | admin/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:admin/index');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/admin/index/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | admin/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:admin/index');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/admin/new/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | admin/new', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:admin/new');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/admin/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | admin', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:admin');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/admin/service/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | admin/service', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:admin/service');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/application/adapter-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define('reservey/tests/unit/application/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/application/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:application');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/classroom/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | classroom', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('classroom', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/classroom/reservations/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | classrooms/classroom/reservations', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:classrooms/classroom/reservations');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/classroom/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | classrooms/classroom', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:classrooms/classroom');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | classrooms', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:classrooms');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | classrooms', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('classrooms', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/reservations/index/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | classrooms/reservations/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:classrooms/reservations/index');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/reservations/new/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | classrooms/reservations/new', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:classrooms/reservations/new');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/reservations/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | classrooms/reservations', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:classrooms/reservations');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/classrooms/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | classrooms', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:classrooms');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/dialog/service-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | dialog', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:dialog');\n      assert.ok(service);\n    });\n  });\n});","define('reservey/tests/unit/mallfunctions/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | mallfunctions', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('mallfunctions', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/reservations/controller-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | reservations', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:reservations');\n      assert.ok(controller);\n    });\n  });\n});","define('reservey/tests/unit/reservations/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | reservations', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('reservations', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/rs-agenda/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-agenda', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-agenda');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-overview/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-overview', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-overview');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-overview/rs-reservation/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-overview/rs-reservation', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-overview/rs-reservation');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-reservation-logs/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-reservations', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-reservations');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-reservations/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-reservations-overview', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-reservations-overview');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-service-item/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | rs service item', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('rs-service-item', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/rs-service/edit/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-service/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-service/edit');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-service/index/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-service/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-service/index');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-service/new/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-service/new', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-service/new');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/rs-service/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | rs-service', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rs-service');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/service-items/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | service items', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('service-items', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/service/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | service', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('service', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/tests/unit/services/route-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | services', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:services');\n      assert.ok(route);\n    });\n  });\n});","define('reservey/tests/unit/session/service-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | session', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:session');\n      assert.ok(service);\n    });\n  });\n});","define('reservey/tests/unit/sidebar/service-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | sidebar', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:sidebar');\n      assert.ok(service);\n    });\n  });\n});","define('reservey/tests/unit/users/model-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | users', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('users', {}));\n      assert.ok(model);\n    });\n  });\n});","define('reservey/config/environment', [], function() {\n  var prefix = 'reservey';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('reservey/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingspOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}